package attacks.app.miscellaneous;

import java.io.File;
import java.util.ArrayList;

import com.ugos.jiprolog.engine.JIPEngine;
import com.ugos.jiprolog.engine.JIPQuery;
import com.ugos.jiprolog.engine.JIPTerm;
import com.ugos.jiprolog.engine.JIPVariable;


import attacks.app.model.Attack;
import attacks.app.model.Prerequisite;




public class RiskVulnerabilityFounder {
	
	
	public static ArrayList<Prerequisite> findRelatedPrerequisites(ArrayList<Prerequisite> prerequisites) {
		ArrayList<Prerequisite> retVal = new ArrayList<>();
		JIPEngine engine = new JIPEngine();

		engine.consultFile("data/facts/related_symptoms.pl");
		for (Prerequisite prerequisite: prerequisites) {
			JIPQuery query = engine.openSynchronousQuery("related_symptom(" + prerequisite.getName() + ",X,Y)");

			JIPTerm solution;
			while ((solution = query.nextSolution()) != null) {
				int i = 0;
				for (JIPVariable var : solution.getVariables()) {
					if (i == 0) {
						boolean toAdd = true;
						String str = var.getValue().toString();
						for (Prerequisite s : retVal) {
							if (s.getName().equals(str)) {
								toAdd = false;
							}
						}
						if (toAdd)
							retVal.add(new Prerequisite(str));

					}
					i++;
				}
			}
		}

		return retVal;
	}
	
	
	public static ArrayList<Prerequisite> getOnlyImportantPrerequisites(ArrayList<Prerequisite> input, Attack attack) {

		ArrayList<Prerequisite> output = new ArrayList<>();
		FuzzyController fuzzyController = new FuzzyController();
		JIPEngine engine = new JIPEngine();
		
		

		for (Prerequisite prerequisite : input) {
			
			//ako fajl ne postoji, dodaj simptom svakako jer ne mozes da proveris da li je nevazan
			File f = new File("data/rules/" + prerequisite.getName() + ".pl");
			if(!f.exists() || f.isDirectory()) { 
			    output.add(prerequisite);
			    continue;
			}
			
			engine.consultFile("data/rules/" + prerequisite.getName() + ".pl");
			
			
			
			double severity = 1;
		    double likelyhood = 1;
		    double exploitability = 1;
		    double authentication = 1;
		    double impact_bias = 1; 
		    double access_vector = 1; 
		    double access_complexity = 1;
		    double confidentiality_impact = 1; 
		    double availability_impact = 1;  
		    double remediation_level = 1; 
		    double report_confidence = 1; 
		    double collateral_damage_potential = 1; 
		    double target_distribution = 1;
			
			// mora za sad da bude broj godina
			String severityRule = prerequisite.getName() + "(" + attack.getCharacteristics().getSeverity() + ",X)";

			//kad se promeni na boolean
			//String sexRule = symptom.getName() + "(" + patient.getGenderOfPatient() + ",X)"; 
			String likelyhoodRule = prerequisite.getName() + "(" + "0" + ",X)";
			
			//kada se doda rasa pacijenta
			//String raceRule = symptom.getName() + "(" + patient.getRace() + ",X)";
			String exploitabilityRule = prerequisite.getName() + "(" + "1" + ",X)";
			
			//System.out.println(ageRule);
			
			String authenticationRule = prerequisite.getName() + "(" + "1" + ",X)";
			String impact_biasRule = prerequisite.getName() + "(" + "1" + ",X)";
			String access_vectorRule = prerequisite.getName() + "(" + "1" + ",X)";
			String access_complexityRule = prerequisite.getName() + "(" + "1" + ",X)";
			String confidentiality_impactRule = prerequisite.getName() + "(" + "1" + ",X)";
			String availability_impactRule = prerequisite.getName() + "(" + "1" + ",X)";
			String remediation_levelRule = prerequisite.getName() + "(" + "1" + ",X)";
			String report_confidenceRule = prerequisite.getName() + "(" + "1" + ",X)";
			String collateral_damage_potentialRule = prerequisite.getName() + "(" + "1" + ",X)";
			String target_distributionRule = prerequisite.getName() + "(" + "1" + ",X)";

			JIPQuery query = engine.openSynchronousQuery(severityRule);

			JIPTerm solution;
			while ((solution = query.nextSolution()) != null) {
				for (JIPVariable var : solution.getVariables()) {
					String str = var.getValue().toString();
					severity = Double.parseDouble(str);
				}
			}
			
			query = engine.openSynchronousQuery(likelyhoodRule);

			while ((solution = query.nextSolution()) != null) {
				for (JIPVariable var : solution.getVariables()) {
					String str = var.getValue().toString();
					likelyhood = Double.parseDouble(str);
				}
			}
			
			query = engine.openSynchronousQuery(exploitabilityRule);

			while ((solution = query.nextSolution()) != null) {
				for (JIPVariable var : solution.getVariables()) {
					String str = var.getValue().toString();
					exploitability = Double.parseDouble(str);
				}
			}
			
			query = engine.openSynchronousQuery(authenticationRule);

			while ((solution = query.nextSolution()) != null) {
				for (JIPVariable var : solution.getVariables()) {
					String str = var.getValue().toString();
					authentication = Double.parseDouble(str);
				}
			}
			
			query = engine.openSynchronousQuery(impact_biasRule);

			while ((solution = query.nextSolution()) != null) {
				for (JIPVariable var : solution.getVariables()) {
					String str = var.getValue().toString();
					impact_bias = Double.parseDouble(str);
				}
			}
			
			query = engine.openSynchronousQuery(access_vectorRule);

			while ((solution = query.nextSolution()) != null) {
				for (JIPVariable var : solution.getVariables()) {
					String str = var.getValue().toString();
					access_vector = Double.parseDouble(str);
				}
			}
			
			query = engine.openSynchronousQuery(access_complexityRule);

			while ((solution = query.nextSolution()) != null) {
				for (JIPVariable var : solution.getVariables()) {
					String str = var.getValue().toString();
					access_complexity = Double.parseDouble(str);
				}
			}

			query = engine.openSynchronousQuery(confidentiality_impactRule);

			while ((solution = query.nextSolution()) != null) {
				for (JIPVariable var : solution.getVariables()) {
					String str = var.getValue().toString();
					confidentiality_impact = Double.parseDouble(str);
				}
			}
			
			query = engine.openSynchronousQuery(availability_impactRule);

			while ((solution = query.nextSolution()) != null) {
				for (JIPVariable var : solution.getVariables()) {
					String str = var.getValue().toString();
					availability_impact = Double.parseDouble(str);
				}
			}
			
			query = engine.openSynchronousQuery(remediation_levelRule);

			while ((solution = query.nextSolution()) != null) {
				for (JIPVariable var : solution.getVariables()) {
					String str = var.getValue().toString();
					remediation_level = Double.parseDouble(str);
				}
			}
			query = engine.openSynchronousQuery(report_confidenceRule);

			while ((solution = query.nextSolution()) != null) {
				for (JIPVariable var : solution.getVariables()) {
					String str = var.getValue().toString();
					report_confidence = Double.parseDouble(str);
				}
			}
			
			query = engine.openSynchronousQuery(collateral_damage_potentialRule);

			while ((solution = query.nextSolution()) != null) {
				for (JIPVariable var : solution.getVariables()) {
					String str = var.getValue().toString();
					collateral_damage_potential = Double.parseDouble(str);
				}
			}
			
			query = engine.openSynchronousQuery(target_distributionRule);

			while ((solution = query.nextSolution()) != null) {
				for (JIPVariable var : solution.getVariables()) {
					String str = var.getValue().toString();
					target_distribution = Double.parseDouble(str);
				}
			}
			
			
			double result = fuzzyController.calculate(severity,
					   likelyhood,
					   exploitability,
					    authentication,
					     impact_bias,
					    access_vector, 
					    access_complexity,
					    confidentiality_impact, 
					   availability_impact, 
					   remediation_level, 
					     report_confidence,
					   collateral_damage_potential,
					    target_distribution);
			if(result > 72) {
				output.add(prerequisite);
			}
		}

		return output;
	}


}
